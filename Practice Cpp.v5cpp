{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftGroupMotorA = motor(PORT2, ratio18_1, true);\nmotor LeftGroupMotorB = motor(PORT5, ratio18_1, true);\nmotor_group LeftGroup = motor_group(LeftGroupMotorA, LeftGroupMotorB);\n\nmotor RightGroupMotorA = motor(PORT8, ratio18_1, false);\nmotor RightGroupMotorB = motor(PORT13, ratio18_1, false);\nmotor_group RightGroup = motor_group(RightGroupMotorA, RightGroupMotorB);\n\nmotor Pickup = motor(PORT9, ratio6_1, false);\n\nmotor Launcher = motor(PORT10, ratio18_1, false);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n\n#include \"vex.h\"\nusing namespace vex;\n\nbool isTurning = false;\ndouble motorTurningPercentage = 100;\n\n\nvoid turnLeft(int vel) \n{\n    LeftGroup.setVelocity(vel, percent);\n    RightGroup.setVelocity(vel, percent);\n    LeftGroup.spin(reverse);\n    RightGroup.spin(forward);\n}\n\n\nvoid turnRight(int vel) \n{\n    LeftGroup.setVelocity(vel, percent);\n    RightGroup.setVelocity(vel, percent);\n    LeftGroup.spin(forward);\n    RightGroup.spin(reverse);\n}\n\n\nvoid stopAll() \n{\n  LeftGroup.stop();\n  RightGroup.stop();\n}\n\n\nvoid forwardPressed() \n{\n  Brain.Screen.print(\"Forward\");\n  Brain.Screen.newLine();\n  \n  LeftGroup.setVelocity(100, percent);\n  RightGroup.setVelocity(100, percent);\n  LeftGroup.spin(forward);\n  RightGroup.spin(forward);\n}\n\n\nvoid reversePressed() \n{\n  Brain.Screen.print(\"Reverse\");\n  Brain.Screen.newLine();\n  \n  LeftGroup.setVelocity(100, percent);\n  RightGroup.setVelocity(100, percent);\n  LeftGroup.spin(reverse);\n  RightGroup.spin(reverse);\n}\n\n\nvoid pickupPressed() \n{\n  Brain.Screen.print(\"Pickup\");\n  Brain.Screen.newLine();\n\n  Pickup.spin(forward);\n}\n\n\nvoid pickupReleased() \n{\n  Pickup.stop();\n}\n\n\nvoid launcherPressed() \n{\n  Brain.Screen.print(\"Launcher\");\n  Brain.Screen.newLine();\n\n  Launcher.spin(forward);\n}\n\n\nvoid launcherReleased()\n{\n  Launcher.stop();\n}\n\n\nvoid smallTurnLeftPressed() {\n  turnLeft(20);\n}\n\n\nvoid smallTurnRightPressed() {\n  turnRight(20);\n}\n\n\nvoid axis4() \n{\n  int aPosition = (int) (Controller1.Axis4.value() * (motorTurningPercentage / 127));\n  Brain.Screen.print(\"Turn\");\n  Brain.Screen.newLine();\n    \n  isTurning = true;\n\n  LeftGroup.setVelocity(abs(aPosition), percent);\n  RightGroup.setVelocity(abs(aPosition), percent);\n\n  if (aPosition < -1) \n  {\n    turnLeft(75);\n  }\n  else if (aPosition > 1) \n  {\n    turnRight(75);\n  }\n  else \n  {\n    isTurning = false;\n  }  \n}\n\n\nvoid release() \n{\n  Brain.Screen.print(\"Released\");\n  Brain.Screen.newLine();\n\n  stopAll();\n  LeftGroup.setVelocity(0, percent);\n  RightGroup.setVelocity(0, percent);\n}\n\n\nint main() {\n  while (true) {\n    \n    //Forward Backward Movement\n    if (!isTurning) {\n      Controller1.ButtonR1.pressed(forwardPressed);\n      Controller1.ButtonR1.released(release);\n      Controller1.ButtonL1.pressed(reversePressed);\n      Controller1.ButtonL1.released(release);\n    }\n    \n    //Turning\n    Controller1.Axis4.changed(axis4);\n\n    //Slow Turning\n    Controller1.ButtonLeft.pressed(smallTurnLeftPressed);\n    Controller1.ButtonLeft.released(release);\n    Controller1.ButtonRight.pressed(smallTurnRightPressed);\n    Controller1.ButtonRight.released(release);\n\n    //Launcher\n    Controller1.ButtonR2.pressed(launcherPressed);\n    Controller1.ButtonR2.released(launcherReleased);\n\n    //Pickup and Release\n    Controller1.ButtonL2.pressed(pickupPressed);\n    Controller1.ButtonL2.released(pickupReleased);\n\n    //Sleep\n    task::sleep(5);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2,5],"name":"LeftGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[8,13],"name":"RightGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[9],"name":"Pickup","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[10],"name":"Launcher","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}