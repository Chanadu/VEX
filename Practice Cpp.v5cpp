{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor MotorGroup2MotorA = motor(PORT2, ratio18_1, true);\nmotor MotorGroup2MotorB = motor(PORT5, ratio18_1, true);\nmotor_group MotorGroup2 = motor_group(MotorGroup2MotorA, MotorGroup2MotorB);\n\nmotor MotorGroup8MotorA = motor(PORT8, ratio18_1, false);\nmotor MotorGroup8MotorB = motor(PORT13, ratio18_1, false);\nmotor_group MotorGroup8 = motor_group(MotorGroup8MotorA, MotorGroup8MotorB);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n\n#include \"vex.h\"\nusing namespace vex;\n\nvoid forwardPressed() {\n  MotorGroup2.setVelocity(100, percent);\n  MotorGroup8.setVelocity(100, percent);\n  MotorGroup2.spin(forward);\n  MotorGroup8.spin(forward);\n}\n\nvoid reversePressed() {\n  MotorGroup2.setVelocity(100, percent);\n  MotorGroup8.setVelocity(100, percent);\n  MotorGroup2.spin(reverse);\n  MotorGroup8.spin(reverse);\n}\n\nvoid axis4() { \n  MotorGroup2.stop();\n  MotorGroup8.stop();\n  int aPosition = (int) (Controller1.Axis4.value() * (50.0 / 127));\n  MotorGroup2.setVelocity(abs(aPosition), percent);\n  MotorGroup8.setVelocity(abs(aPosition), percent);\n  Brain.Screen.print(aPosition);\n  Brain.Screen.newLine();\n  Brain.Screen.clearScreen();\n  if (aPosition < 10) {\n    MotorGroup2.spin(reverse);\n    MotorGroup8.spin(forward);\n  } else if (aPosition > 10) {\n    MotorGroup2.spin(forward);\n    MotorGroup8.spin(reverse);\n  }\n}\n\nvoid release() {\n  MotorGroup2.stop();\n  MotorGroup8.stop();\n}\n\n\nint main() {\n\n  while (true) {\n    Controller1.ButtonR2.pressed(forwardPressed);\n    //Controller1.ButtonL2.pressed(reversePressed);\n    Controller1.ButtonR1.released(release);\n    Controller1.ButtonL1.released(release);\n    Controller1.Axis4.changed(axis4);\n    task::sleep(5);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2,5],"name":"MotorGroup2","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[8,13],"name":"MotorGroup8","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}